{"version":3,"sources":["MyButton/SubBomb/Bomb.js","MyButton/SubBomb/Button.js","MyButton/MyButton.js","App.js","serviceWorker.js","index.js"],"names":["Bomb","react_default","a","createElement","Button","props","onClick","mission","name","children","MyButton","stage","theFlag","SubBomb_Bomb","SubBomb_Button","App","state","count","switchPicSrc","bomb","bombFlag","_this","setState","incrementHandler","lessZeroChecker","alert","decrementHandler","resetHandler","switchPicHandler","src","alt","height","this","src_MyButton_MyButton","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAMeA,SALF,WACX,OACEC,EAAAC,EAAAC,cAAA,uCCGWC,EALA,SAACC,GACd,OACEJ,EAAAC,EAAAC,cAAA,UAAQG,QAAYD,EAAME,SAAaF,EAAMG,KAA7C,IAAsDH,EAAMI,SAA5D,MCYWC,EAXE,SAACL,GAChB,OACEJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oBAAaE,EAAMM,MAAnB,IAA6BN,EAAMG,KAAnC,KAEEH,EAAMO,QAAUX,EAAAC,EAAAC,cAACU,EAAD,MAAWZ,EAAAC,EAAAC,cAACW,EAAD,CAAQP,QAAYF,EAAME,QAAUC,KAASH,EAAMG,MAAnD,IAA8DH,EAAMI,SAApE,OC2CpBM,6MA9CbC,MAAQ,CACNC,MAAQ,EAERC,aAAe,eACfC,MAAO,KAITC,SAAW,kBAAMC,EAAKL,MAAMC,MAAQ,EAAII,EAAKC,SAAU,CAAEH,MAAO,IAAYE,EAAKC,SAAU,CAAEH,MAAO,OAGpGI,iBAAmB,WACjBF,EAAKC,SAAU,CAAEL,MAAQI,EAAKL,MAAMC,MAAQ,IAC5CI,EAAKD,cAEPI,gBAAkB,WAChBH,EAAKL,MAAMC,MAAQ,EACnBI,EAAKC,SAAU,CAAEL,MAAQI,EAAKL,MAAMC,MAAQ,IAC1CQ,MAAM,+BAEVC,iBAAmB,WACjBL,EAAKG,kBACLH,EAAKD,cAEPO,aAAe,WACbN,EAAKC,SAAU,CAAEL,MAAQ,IACzBI,EAAKD,cAEPQ,iBAAmB,WACW,iBAA5BP,EAAKL,MAAME,aAAyBG,EAAKC,SAAU,CAAEJ,aAAcjB,EAAAC,EAAAC,cAAA,OAAK0B,IAAM,uDAAwDC,IAAI,uCAASC,OAAS,SAAcV,EAAKC,SAAU,CAAEJ,aAAc,0FAGzM,OACEjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0DAAgB6B,KAAKhB,MAAME,aAA3B,IAA2Cc,KAAKhB,MAAMC,OACtDhB,EAAAC,EAAAC,cAAC8B,EAAD,CAAUtB,MAAQ,IAAIJ,QAAYyB,KAAKT,iBAAmBf,KAAO,uBACjEP,EAAAC,EAAAC,cAAC8B,EAAD,CAAUtB,MAAQ,IAAIJ,QAAYyB,KAAKN,iBAAmBlB,KAAO,6BACjEP,EAAAC,EAAAC,cAAC8B,EAAD,CAAUtB,MAAQ,IAAIJ,QAAYyB,KAAKL,aAAenB,KAAO,6BAC7DP,EAAAC,EAAAC,cAAC8B,EAAD,CAAUtB,MAAQ,IAAIJ,QAAYyB,KAAKJ,iBAAmBpB,KAAO,6BACjEP,EAAAC,EAAAC,cAAC8B,EAAD,CAAUtB,MAAQ,IAAIJ,QAAYyB,KAAKT,iBAAmBf,KAAO,2BAAOI,QAAYoB,KAAKhB,MAAMG,MAA/F,gBAA2G,GAAKa,KAAKhB,MAAMC,MAA3H,oBAxCUiB,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.553e0c05.chunk.js","sourcesContent":["import React from \"react\";\r\nconst Bomb = () => {\r\n  return(\r\n    <p>粽子爆了</p>\r\n  )\r\n}\r\nexport default Bomb","import React from \"react\";\r\nconst Button = (props) => {\r\n  return(\r\n    <button onClick = { props.mission } >{ props.name } { props.children } </button>\r\n  )\r\n}\r\nexport default Button","import React from \"react\";\r\nimport Bomb from \"./SubBomb/Bomb\"\r\nimport Button from \"./SubBomb/Button\"\r\n\r\nconst MyButton = (props) => {\r\n  return(\r\n    <div>\r\n      <h2>Level: { props.stage } { props.name } </h2>\r\n      {\r\n        props.theFlag ? <Bomb /> : <Button mission = { props.mission } name = { props.name } > { props.children } </Button>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MyButton","import React from 'react';\nimport './App.css';\n\nimport MyButton from './MyButton/MyButton';\n\nclass App extends React.Component {\n  state = {\n    count : 0,\n    // stage : [ 1, 2, 3, 4, 5 ] ,\n    switchPicSrc : \"粽子\",\n    bomb : false\n  }\n\n  // flag更新有問題，button 跟 p 的切換沒有即時\n  bombFlag = () => this.state.count < 9 ? this.setState( { bomb : false } ) : this.setState( { bomb : true } );\n\n  // setState 的使用-同步 or 非同步？、updater\n  incrementHandler = () => { \n    this.setState( { count : this.state.count + 1 } );\n    this.bombFlag(); }\n\n  lessZeroChecker = () => {\n    this.state.count > 0 ?\n    this.setState( { count : this.state.count - 1 } ) :\n      alert(\"沒粽子啦\");\n  }\n  decrementHandler = () => { \n    this.lessZeroChecker();\n    this.bombFlag(); }\n\n  resetHandler = () =>{ \n    this.setState( { count : 0 } );\n    this.bombFlag(); }\n\n  switchPicHandler = () => { \n    this.state.switchPicSrc === \"粽子\" ?  this.setState( { switchPicSrc: <img src = \"http://p6.qhimg.com/dr/250__/t01e8735903540fce6b.png\"  alt=\"看不到就算了\" height = \"80\" /> } ) : this.setState( { switchPicSrc: \"粽子\" } ); }\n  \n  render() {\n    return (\n      <div>\n        <h1>粽子節，數粽子 - { this.state.switchPicSrc }:{this.state.count}</h1>\n        <MyButton stage = \"1\" mission = { this.incrementHandler } name = \"去吧！\"></MyButton>\n        <MyButton stage = \"2\" mission = { this.decrementHandler } name = \"回來吧！\"></MyButton>\n        <MyButton stage = \"3\" mission = { this.resetHandler } name = \"消失吧！\"></MyButton>\n        <MyButton stage = \"4\" mission = { this.switchPicHandler } name = \"變形吧！\"></MyButton>\n        <MyButton stage = \"5\" mission = { this.incrementHandler } name = \"點爆吧！\" theFlag = { this.state.bomb }>還有 { 10 - this.state.count } 次 </MyButton>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}