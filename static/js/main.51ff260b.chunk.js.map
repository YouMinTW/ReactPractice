{"version":3,"sources":["MyButton/SubBomb/Bomb.js","MyButton/SubBomb/Button.js","MyButton/MyButton.js","App.js","serviceWorker.js","index.js"],"names":["Bomb","react_default","a","createElement","Button","props","onClick","mission","name","children","MyButton","stage","theFlag","SubBomb_Bomb","SubBomb_Button","App","state","counter","count","bomb","level","_this","incrementHandler","decrementHandler","resetHandler","switchPicHandler","bombHandler","switchPicSrc","setState","console","log","Object","assertThisInitialized","alert","src","alt","height","this","src_MyButton_MyButton","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.51ff260b.chunk.js","sourcesContent":["import React from \"react\";\r\nconst Bomb = () => {\r\n  return(\r\n    <p>粽子爆了</p>\r\n  )\r\n}\r\nexport default Bomb","import React from \"react\";\r\nconst Button = (props) => {\r\n  return(\r\n    <button onClick = { props.mission } >{ props.name } { props.children } </button>\r\n  )\r\n}\r\nexport default Button","import React from \"react\";\r\nimport Bomb from \"./SubBomb/Bomb\"\r\nimport Button from \"./SubBomb/Button\"\r\n\r\nconst MyButton = (props) => {\r\n  return(\r\n    <div>\r\n      <h2>Level: { props.stage } { props.name } </h2>\r\n      {\r\n        props.theFlag&&props.stage===5 ? <Bomb /> : <Button mission = { props.mission } name = { props.name } > { props.children } </Button>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MyButton","import React from 'react';\nimport './App.css';\n\nimport MyButton from './MyButton/MyButton';\n\nclass App extends React.Component {\n  state = {\n   counter : { count : 0, bomb : false },\n\n  //  目前state中的method都還沒辦法用，還在思考怎麼透過state來pass method reference\n   stage:[\n     { level:1 , mission: this.incrementHandler , name: \"去吧\" },\n     { level:2 , mission: this.decrementHandler , name : \"回來吧！\" },\n     { level:3 , mission: this.resetHandler , name : \"消失吧！\" },\n     { level:4 , mission: this.switchPicHandler , name : \"變形吧！\" },\n     { level:5 , mission: this.bombHandler , name : \"點爆吧！\" }\n   ],\n  //  換圖片的寫法想再漂亮一點 \n   switchPicSrc : \"粽子\",\n  }\n\n  // setState 的使用-同步 or 非同步？、updater\n  incrementHandler = () => { \n    if( this.state.counter.count < 9 )\n    { \n      this.setState( { counter : { count : this.state.counter.count + 1 , bomb : false } } );\n    } else { \n      this.setState( { counter : { count : this.state.counter.count + 1 , bomb : true } } );\n    }\n    console.log(this);\n   }\n\n  decrementHandler = () => { \n    if( this.state.counter.count > 10 )\n    { \n      this.setState( { counter : { count : this.state.counter.count - 1 , bomb : true } } );\n    } else { \n      if(this.state.counter.count > 0)\n      {\n        this.setState( { counter : { count : this.state.counter.count - 1 , bomb : false } } );\n      } else {\n        alert(\"沒粽子啦\")\n      }\n    }\n  }\n\n  resetHandler = () =>{ \n    this.setState( { counter : { count : 0 } } ); }\n\n  switchPicHandler = () => { \n    this.state.switchPicSrc === \"粽子\" ?  this.setState( { switchPicSrc: <img src = \"http://p6.qhimg.com/dr/250__/t01e8735903540fce6b.png\"  alt=\"看不到就算了\" height = \"80\" /> } ) : this.setState( { switchPicSrc: \"粽子\" } ); }\n\n  render() {\n    return (\n      <div>\n        <h1>粽子節，數粽子 - { this.state.switchPicSrc }:{ this.state.counter.count }</h1>\n        <MyButton stage = { this.state.stage[0].level } mission = {  this.incrementHandler } name = { this.state.stage[0].name }  theFlag = { this.state.counter.bomb }/>\n        <MyButton stage = { this.state.stage[0].level } mission = {  this.state.stage[0].mission } name = { this.state.stage[0].name }  theFlag = { this.state.counter.bomb }/>\n        <MyButton stage = { this.state.stage[1].level } mission = {  this.decrementHandler } name = { this.state.stage[1].name }/>\n        <MyButton stage = { this.state.stage[2].level } mission = {  this.resetHandler } name = { this.state.stage[2].name }/>\n        <MyButton stage = { this.state.stage[3].level } mission = {  this.switchPicHandler } name = { this.state.stage[3].name }/>\n        <MyButton stage = { this.state.stage[4].level } mission = {  this.incrementHandler } name = { this.state.stage[4].name } theFlag = { this.state.counter.bomb }> 還有{ 10 - this.state.counter.count }次 </MyButton>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}